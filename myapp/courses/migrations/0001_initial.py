# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-01-06 08:57
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[(0, b'lab'), (1, b'quiz'), (2, b'project'), (3, b'exam')], default=0, max_length=5, verbose_name='type')),
                ('label', models.CharField(max_length=20, verbose_name='label')),
                ('start_datetime', models.DateTimeField(blank=True, null=True, verbose_name='start date time')),
                ('end_datetime', models.DateTimeField(blank=True, null=True, verbose_name='end date time')),
            ],
            options={
                'ordering': ['type', 'label'],
                'verbose_name': 'assessment',
                'verbose_name_plural': 'assessments',
            },
        ),
        migrations.CreateModel(
            name='BlankQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(help_text=b'a question number unique together with the assessment', verbose_name='question no')),
                ('type', models.CharField(choices=[(0, b'programming'), (1, b'mcq'), (2, b'blank'), (3, b'check off'), (4, b'others')], default=0, max_length=5, verbose_name='question type')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('solution', models.TextField(blank=True, null=True, verbose_name='solution')),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Assessment')),
            ],
            options={
                'ordering': ['assessment', 'number'],
                'abstract': False,
                'verbose_name': '%(class)s',
            },
        ),
        migrations.CreateModel(
            name='BlankQuestionContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part_seq', models.PositiveSmallIntegerField(help_text='sequence unique together with question', verbose_name='sequence')),
                ('content', models.CharField(blank=True, max_length=200, verbose_name='content')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blank_parts', to='courses.BlankQuestion')),
            ],
            options={
                'ordering': ['question', 'part_seq'],
                'verbose_name': 'blank_question_part',
                'verbose_name_plural': 'blank_question_parts',
            },
        ),
        migrations.CreateModel(
            name='BlankSolution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_set', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, default=b'', max_length=255, null=True, verbose_name='solution'), blank=True, help_text='solution set', null=True, size=None)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='solution_set', to='courses.BlankQuestion')),
            ],
        ),
        migrations.CreateModel(
            name='CheckoffQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(help_text=b'a question number unique together with the assessment', verbose_name='question no')),
                ('type', models.CharField(choices=[(0, b'programming'), (1, b'mcq'), (2, b'blank'), (3, b'check off'), (4, b'others')], default=0, max_length=5, verbose_name='question type')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('solution', models.TextField(blank=True, null=True, verbose_name='solution')),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Assessment')),
            ],
            options={
                'ordering': ['assessment', 'number'],
                'abstract': False,
                'verbose_name': '%(class)s',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_batch', models.CharField(blank=True, help_text='e.g. FY15T3 (for Year 2015 Term 3)', max_length=20, verbose_name='course batch')),
                ('course_code', models.CharField(blank=True, help_text='e.g. CS101', max_length=20, verbose_name='course code')),
                ('school', models.CharField(blank=True, help_text='e.g. SUTD', max_length=100, null=True)),
                ('department', models.CharField(blank=True, help_text='e.g. ISTD', max_length=100, null=True)),
                ('title', models.CharField(blank=True, help_text='e.g. Digital World', max_length=50, null=True)),
                ('description', models.TextField(blank=True, help_text='e.g. An introduction course to programming using Python', max_length=255, null=True)),
                ('programming_language', models.CharField(help_text='e.g. Python', max_length=55, verbose_name='programming language')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(verbose_name='end date')),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date created')),
                ('participants', models.ManyToManyField(related_name='courses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_created'],
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
            },
        ),
        migrations.CreateModel(
            name='Mcq',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(help_text=b'a question number unique together with the assessment', verbose_name='question no')),
                ('type', models.CharField(choices=[(0, b'programming'), (1, b'mcq'), (2, b'blank'), (3, b'check off'), (4, b'others')], default=0, max_length=5, verbose_name='question type')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('solution', models.TextField(blank=True, null=True, verbose_name='solution')),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Assessment')),
            ],
            options={
                'ordering': ['assessment', 'number'],
                'abstract': False,
                'verbose_name': '%(class)s',
            },
        ),
        migrations.CreateModel(
            name='MultipleChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(blank=True, max_length=200, verbose_name='content')),
                ('is_correct', models.BooleanField(default=False, verbose_name='is correct')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mcq_choices', to='courses.Mcq')),
            ],
            options={
                'ordering': ['question'],
                'verbose_name': 'multiple_choice',
                'verbose_name_plural': 'multiple_choices',
            },
        ),
        migrations.CreateModel(
            name='ProgrammingQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveSmallIntegerField(help_text=b'a question number unique together with the assessment', verbose_name='question no')),
                ('type', models.CharField(choices=[(0, b'programming'), (1, b'mcq'), (2, b'blank'), (3, b'check off'), (4, b'others')], default=0, max_length=5, verbose_name='question type')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('solution', models.TextField(blank=True, null=True, verbose_name='solution')),
                ('code_signature', models.CharField(blank=True, max_length=50, null=True, verbose_name='code_signature')),
                ('default_code', models.TextField(blank=True, null=True, verbose_name='default_code')),
                ('assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.Assessment')),
            ],
            options={
                'ordering': ['assessment', 'number'],
                'abstract': False,
                'verbose_name': '%(class)s',
            },
        ),
        migrations.CreateModel(
            name='UnitTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visibility', models.IntegerField(choices=[(0, b'Public'), (1, b'Private')], default=0)),
                ('type', models.IntegerField(choices=[(0, b'matching'), (1, b'number'), (2, b'keywords')], default=0, help_text='type of test cases', verbose_name='type')),
                ('test_content', models.TextField(default=b'', help_text=b'purpose of the test case', max_length=100000, verbose_name='test_content')),
                ('inputs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, default=b'', max_length=255, null=True, verbose_name='input_values'), blank=True, help_text='each input in its raw form', null=True, size=None)),
                ('expected_output', models.TextField(blank=True, default=b'', help_text='expected output in string format', max_length=1024, null=True, verbose_name='expected_output')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unittests', to='courses.ProgrammingQuestion')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'test_case',
                'verbose_name_plural': 'test_cases',
            },
        ),
        migrations.AddField(
            model_name='assessment',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizes', to='courses.Course'),
        ),
        migrations.AlterUniqueTogether(
            name='programmingquestion',
            unique_together=set([('assessment', 'number')]),
        ),
        migrations.AlterUniqueTogether(
            name='multiplechoice',
            unique_together=set([('question', 'content')]),
        ),
        migrations.AlterUniqueTogether(
            name='mcq',
            unique_together=set([('assessment', 'number')]),
        ),
        migrations.AlterUniqueTogether(
            name='course',
            unique_together=set([('course_batch', 'course_code', 'school', 'department')]),
        ),
        migrations.AlterUniqueTogether(
            name='checkoffquestion',
            unique_together=set([('assessment', 'number')]),
        ),
        migrations.AlterUniqueTogether(
            name='blankquestioncontent',
            unique_together=set([('part_seq', 'question')]),
        ),
        migrations.AlterUniqueTogether(
            name='blankquestion',
            unique_together=set([('assessment', 'number')]),
        ),
    ]
